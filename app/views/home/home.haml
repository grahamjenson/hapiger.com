.container
  .row.tagline
    .col-md-8
      %h2.subheader
        Increase your 
        %strong 
          %i user engagement 
        and 
        %strong 
          %i sales 
        with good recommendations
    #call_to_action.col-md-4
      %a#download_btn.btn.btn-lg.btn-block.btn-primary{:href => "https://github.com/grahamjenson/hapiger"}
        %i.fa.fa-github.icon
        Get the Source
      %a.btn.btn-lg.btn-block{:href => "https://github.com/grahamjenson/hapiger"}
        %i.fa.fa-book.icon
        Documentation
      .page-header
      = form_tag("/subscribe", method: "post", :name => 'eaddress', :class => 'validate') do
        .input-group
          %input.email.form-control{:name => "EMAIL", :placeholder => "E-mail address", :type => "email", :value => ""}
          %span.input-group-btn
            %input.button.btn.btn-default{:name => "subscribe", :type => "submit", :value => "Subscribe"}
  .row
    %section#install.col-md-8
      .page-header
        %h4 Install HapiGER
      %p Install with npm
      %pre
        %code.bash
          npm install -g hapiger 
      .page-header
      %h4
        Start HapiGER
      %p Start with Memory Event Store (events are not persisted)
      %pre
        %code.bash
          hapiger
      %p 
        %i PostgreSQL and RethinkDB are also offered as event stores for persistence and scalability.
      .page-header
      %h4
        Create Some Events
      %p 
        Person
        %code p1 
        %code views
        thing 
        %code t1
      %pre
        %code.bash
          :preserve
            curl -X POST 'http://localhost:3456/default/events' -d '{
                "person":"p1", 
                "action": "view", 
                "thing":"t1"
              }'

      %p 
        Person
        %code p2
        also 
        %code views
        thing 
        %code t1 
        = ". This makes "
        %code p1
        and 
        %code p2
        similar
      %pre
        %code.bash
          :preserve
            curl -X POST 'http://localhost:3456/default/events' -d '{
                "person":"p2", 
                "action": "view", 
                "thing":"t1"
              }'

      %p 
        Person
        %code p2 
        %code buys
        thing 
        %code t1
      %pre
        %code.bash
          :preserve
            curl -X POST 'http://localhost:3456/default/events' -d '{
                "person":"p2", 
                "action": "buy", 
                "thing":"t2"
              }'
      .page-header
      %h4
        Give Action Weight
      %p
        This will make people that
        %code view
        the same things similar to each other.
      %pre
        %code.bash
          :preserve
            curl -X POST 'http://localhost:3456/default/actions' -d'{
                "name": "view", 
                "weight": 1
              }'
      .page-header
      %h4
        Get Recommendations
      %p 
        What would person 
        %code p1
        like to 
        %code buy
        ?
        Because 
        %code p1
        and 
        %code p2
        are similar, and 
        %code p2
        has bought
        %code t2
        , HapiGER will recommend 
        %code p1
        to 
        %code buy
        %code p1
      %pre
        %code.bash
          :preserve
            curl -X GET 'http://localhost:3456/default/recommendations?person=p1&action=buy'
      %pre
        %code.json
          :preserve
            {
              "recommendations":[
                {
                  "thing":"t2",
                  "weight":0.22119921692859512,
                  "people":[
                    "p2"
                  ],
                  "last_actioned_at":"2015-02-05T05:56:42.862Z"
                }
              ],
              "confidence":0.00019020140391302825,
              "similar_people":{
                "p2":1
              }
            }
      .page-header
      %h4
        Clients
      %ul
        %li 
          Node.js 
          %a{href: 'https://www.npmjs.com/package/ger-client'} ger-client
